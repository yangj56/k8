important docs
for declarative method
https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/

for imperative method
https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#-strong-getting-started-strong-

sample yamls
https://kubernetes.io/docs/concepts/storage/persistent-volumes/

https://kubernetes.io/docs/reference/kubectl/cheatsheet/

.bashrc
source <(kubectl completion bash) # set up autocomplete in bash into the current shell, bash-completion package should be installed first.
echo "source <(kubectl completion bash)" >> ~/.bashrc # add autocomplete permanently to your bash shell.
alias k=kubectl
complete -o default -F __start_kubectl k

"export dro="--dry-run=client -o yaml""
"export tmp="--image=nginx:alpine --restart=Never --rm -i -- curl -m 5""

k -n ss run tmp2 $tmp url

.vimrc
set tabstop=2 shiftwidth=2 expandtab # use 2 spaces instead of tab

k config set-context --current --namespace=core-banking

k get something --no-headers | wc -l

k delete --grace-period=0 --force

----> versioning
k version --short

----> admission-plugins
cat /etc/kubernetes/manifests/kube-apiserver.yaml | grep admission-plugins

----> label
k label node/pod xx-name key=value

----> CRD
k get crd

----> expose
k -n world expose deploy europe --port 80

----> get all
k get db-backups -A # the -A very important

----> scale down a rollout
kubectl scale deploy wonderful-v1 --replicas 0

----> root user
runAsUser: 0

----> delete pod of certain label
k delete pod -l xx=xxx

----> expose deployment
k expose deployment xx-deployment --port=21 --name=xx-name

----> get only warning logs
k logs pod-name -c log-x | grep WARNING > test.txt

----> pod is scheduled on controlplane only
pod.spec.nodeName: controlplane

----> always check all namespaces
k get pod --all-namespaces

----> create pod yaml using dryrun
k run pod-name --image=nginx:alpine --dry-run=client -oyaml > logger.yaml

----> edit existing pod  
k get pod pod-name -n namespace -oyaml > xx.yaml

----> edit existing deployment  
k edit deploy wonderful-v1

----> to test connections
k exec -it pod-name -- sh 
 -> ping another pod by
    nc -v -z -w 2 podname 80

----> get clusterIP
k -n mars get pod -o wide # to get the cluster IP

----> get all the items in namespace
k -n mars get all

----> labels
k -n sun get pod --show-labels

----> get all nodes ip address
k get nodes -o wide

----> update image
k set image deploy/pod xxx containername=imagexxx

----> edit service
k -n jupiter edit service jupiter-crew-svc

---->  get pod with a specific label
k -n sun get pod -l type=runner # only pods with label runner

----> helm
show all including pending ones
helm -n mercury ls -a

----> deploy
k -n moon rollout restart deploy web-moon

----> initContainer
tmp/nameofthevolume

----> service selector is for pods not deployment
----> service port is the one we should curl

---> api
k api-resources

k proxy 8081&
curl localhost:8081/api/authorization.k8s.io

vim /etc/kubernetes/manifests/kube-apiserver.yaml
command --runtime-config=

kubeconfig
cat /.kube/config
k config use-context xx (context.name) -kubeconfig /filename
check current context cat /.kube/config again and look for current-context

authorization mode
vim /etc/kubernetes/manifests/kube-apiserver.yaml
inside spec.containers.command.authorization-mode 
k get roles
k get roles -A
k get roles -A --no-headers | wc -l
k describe role kube-proxy-role

which account role is assigned to?
k get rolebindings -n nass
k describe rolebinding nnnxxx

k --as dev-user get pod xxx -n xx
if cannot meaning the user doesnt have permission
